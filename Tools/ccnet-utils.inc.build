<?xml version="1.0" encoding="utf-8"?>

<project name="CruiseControl.NET" xmlns="http://nant.sourceforge.net/release/0.92/nant.xsd">

	<target name="cleanupDocsDictionary" description="Delete all files in the docs dictionary.">

		<delete includeemptydirs="false" verbose="${nant.verbosity}">
			<fileset basedir="${path::get-full-path('doc')}" defaultexcludes="true">
				<include name="CCNET/**"  />
			</fileset>
		</delete>

	</target>

    <!--***********************************
        Determines the path to MSBuild based on the same logic as NuGet (see NuGetClient.CommandLine.MsBuildUtility)
        *********************************** -->
    <script language="C#" prefix="linux">
        <code>
            <![CDATA[
              [Function("get-msbuild-path")]
              public static string getMSBuildPath()
              {
                string msBuildPath = string.Empty;

                try
                {
                    var platform = (int)Environment.OSVersion.Platform;
                    var isLinux = platform == 4;
                    var isMono = Type.GetType("Mono.Runtime") != null;

                    if(isLinux && isMono)
                    {
                        var libPath = Path.GetDirectoryName(typeof(object).Assembly.Location);
                        //path to msbuild folder is /usr/lib/mono/msbuild
                        //path to xbuild folder is /usr/lib/mono/xbuild
                        string[] buildExecutables = new string[4]{
                            Path.Combine(libPath, "..", "msbuild", "15.0", "bin", "MSBuild.dll"),
                            Path.Combine(libPath, "..", "msbuild", "14.1", "bin", "MSBuild.dll"),
                            Path.Combine(libPath, "..", "xbuild", "14.0", "bin", "xbuild.exe"),
                            Path.Combine(libPath, "..", "xbuild", "12.0", "bin", "xbuild.exe")
                        };

                        foreach(var buildExe in buildExecutables)
                        {
                            if(File.Exists(buildExe))
                            {
                                msBuildPath = buildExe;
                                break;
                            }
                        }
                    }
                }
                catch(Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }

                return msBuildPath;
              }
            ]]>
        </code>
    </script>

</project>
